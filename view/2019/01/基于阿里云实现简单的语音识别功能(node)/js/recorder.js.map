{"version":3,"sources":["webpack://Recorder/webpack/universalModuleDefinition","webpack://Recorder/webpack/bootstrap","webpack://Recorder/./src/recorder.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isrecording","Recorder","_this","this","options","arguments","length","undefined","_classCallCheck","context","AudioContext","webkitAudioContext","inputSampleRate","sampleRate","config","sampleBits","includes","numChannels","size","buffer","PCMData","audioInput","createScript","createScriptProcessor","createJavaScriptNode","recorder","apply","onaudioprocess","e","data","inputBuffer","getChannelData","push","Float32Array","lData","rData","ArrayBuffer","byteLength","dData","offset","_this2","clear","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","error","throwError","message","connect","destination","inputSampleBits","outputSampleRate","oututSampleBits","disconnect","source","_this3","stop","decodeAudioData","encodeWAV","createBufferSource","start","console","log","encodePCM","Blob","getPCM","getWAV","type","set","flat","compression","parseInt","result","index","j","bytes","compress","Math","min","dataLength","DataView","val","max","setInt8","setInt16","channelCount","writeString","setUint32","setUint16","setUint8","getUint8","str","charCodeAt","Error"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","let isrecording = false;   // 是否正在录音\r\n\r\nclass Recorder {\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options = {}) {\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n        this.inputSampleRate = this.context.sampleRate;     // 获取当前输入的采样率\r\n\r\n        // 配置config，检查值是否有问题\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: [8, 16].includes(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率\r\n            sampleRate: [11025, 16000, 22050, 24000, 44100, 48000].includes(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // 声道数，1或2\r\n            numChannels: [1, 2].includes(options.numChannels) ? options.numChannels : 1,\r\n        };\r\n        this.size = 0;              // 录音文件总长度\r\n        this.buffer = [];           // 录音缓存\r\n        this.PCMData = null;        // 存储转换后的pcm数据\r\n        this.audioInput = null;     // 录音输入节点\r\n\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        this.createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = this.createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = e => {\r\n            // getChannelData返回Float32Array类型的pcm数据\r\n            if (1 === this.config.numChannels) {\r\n                let data = e.inputBuffer.getChannelData(0);\r\n                // 单通道\r\n                this.buffer.push(new Float32Array(data));\r\n                this.size += data.length;\r\n            } else {\r\n                /*\r\n                 * 双声道处理\r\n                 * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\r\n                 * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\r\n                 */\r\n                let lData = new Float32Array(e.inputBuffer.getChannelData(0)),\r\n                    rData = new Float32Array(e.inputBuffer.getChannelData(1)),\r\n                    // 新的数据为左声道和右声道数据量之和\r\n                    buffer = new ArrayBuffer(lData.byteLength + rData.byteLength),\r\n                    dData = new Float32Array(buffer),\r\n                    offset = 0;\r\n\r\n                for (let i = 0; i < lData.byteLength; ++i) {\r\n                    dData[ offset ] = lData[i];\r\n                    offset++;\r\n                    dData[ offset ] = rData[i];\r\n                    offset++;\r\n                }\r\n\r\n                this.buffer.push(dData);\r\n                this.size += offset;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 开始录音\r\n    start() {\r\n        if (isrecording) {\r\n            // 正在录音，则不允许\r\n            return;\r\n        }\r\n        // 清空数据\r\n        this.clear();\r\n        isrecording = true;\r\n\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        }).then(stream => {\r\n            // audioInput表示音频源节点\r\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n            this.audioInput = this.context.createMediaStreamSource(stream);\r\n        }, error => {\r\n            // 抛出异常\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        }).then(() => {\r\n            // audioInput 为声音源，连接到处理节点 recorder\r\n            this.audioInput.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n            // 设置压缩参数\r\n            this.inputSampleBits = 16;                          // 输入采样数位 8, 16\r\n            this.outputSampleRate = this.config.sampleRate;     // 输出采样率\r\n            this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\r\n        });\r\n    }\r\n\r\n    // 停止录音\r\n    stop() {\r\n        isrecording = false;\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.recorder.disconnect();\r\n    }\r\n\r\n    // 清空\r\n    clear() {\r\n        this.buffer.length = 0;\r\n        this.size = 0;\r\n        this.PCMData = null;\r\n        this.audioInput = null;\r\n\r\n        if (this.source) {\r\n            // 录音前，关闭录音播放\r\n            this.source.disconnect();\r\n            this.source = null;\r\n        }\r\n    }\r\n\r\n    // 播放声音\r\n    play() {\r\n        this.stop();\r\n\r\n        this.context.decodeAudioData(this.encodeWAV().buffer, buffer => {\r\n            this.source = this.context.createBufferSource();\r\n\r\n            // 设置数据\r\n            this.source.buffer = buffer;\r\n            // connect到扬声器\r\n            this.source.connect(this.context.destination);\r\n            this.source.start();\r\n        }, function() {\r\n            console.log('error');\r\n        });\r\n    }\r\n\r\n    // 获取PCM编码的二进制数据\r\n    getPCM() {\r\n        // 利用存储的PCMData，节省性能\r\n        return this.PCMData || ( this.PCMData = this.encodePCM() );\r\n    }\r\n\r\n    // 获取不压缩的PCM格式的编码\r\n    getPCMBlob() {\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    // 获取WAV编码的二进制数据\r\n    getWAV() {\r\n        return this.encodeWAV();\r\n    }\r\n\r\n    // 获取不压缩的WAV格式的编码\r\n    getWAVBlob() {\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    // 将二维数组转一维\r\n    flat() {\r\n        // 合并\r\n        let data = new Float32Array(this.size),\r\n            offset = 0; // 偏移量计算\r\n        // 将二维数据，转成一维数据\r\n        for (let i = 0; i < this.buffer.length; i++) {\r\n            data.set(this.buffer[i], offset);\r\n            offset += this.buffer[i].length;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    // 数据合并压缩\r\n    // 根据输入和输出的采样率压缩数据，\r\n    // 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n    // 所以输入数据中每隔3取1位\r\n    compress() {\r\n        let data = this.flat(),\r\n        // 压缩，根据采样率进行压缩\r\n            compression = parseInt(this.inputSampleRate / this.outputSampleRate, 10) || 1,\r\n            length = data.length / compression,\r\n            result = new Float32Array(length),\r\n            index = 0, j = 0;\r\n        // 循环间隔 compression 位取一位数据\r\n        while (index < length) {\r\n            result[index] = data[j];\r\n            j += compression;\r\n            index++;\r\n        }\r\n        // 返回压缩后的一维数据\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 转换到我们需要的对应格式的编码\r\n     * return {DataView}    pcm编码的数据\r\n     */\r\n    encodePCM() {\r\n        let bytes = this.compress(),\r\n            sampleBits = Math.min(this.inputSampleBits, this.oututSampleBits),\r\n            offset = 0,\r\n            dataLength = bytes.length * (sampleBits / 8),\r\n            buffer = new ArrayBuffer(dataLength),\r\n            data = new DataView(buffer);\r\n    \r\n        // 写入采样数据\r\n        if (sampleBits === 8) {\r\n            for (var i = 0; i < bytes.length; i++, offset++) {\r\n                // 范围[-1, 1]\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 8位采样位划分成2^8=256份，它的范围是0-255; \r\n                // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n                var val = s < 0 ? s * 128 : s * 127;\r\n                val = parseInt(val + 128);\r\n                data.setInt8(offset, val, true);\r\n            }\r\n        } else {\r\n            for (var i = 0; i < bytes.length; i++, offset += 2) {\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n                // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n                data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n            }\r\n        }\r\n    \r\n        return data;\r\n    }\r\n\r\n    // 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n    // 所以，此处只需要在pcm数据前增加下就行了。\r\n    encodeWAV() {\r\n        var sampleRate = Math.min(this.inputSampleRate, this.outputSampleRate),\r\n            sampleBits = Math.min(this.inputSampleBits, this.oututSampleBits),\r\n            bytes = this.encodePCM(),\r\n            buffer = new ArrayBuffer(44 + bytes.byteLength),\r\n            data = new DataView(buffer),\r\n            channelCount = this.config.numChannels, // 声道\r\n            offset = 0;\r\n    \r\n        // 资源交换文件标识符\r\n        writeString(data, offset, 'RIFF'); offset += 4;\r\n        // 下个地址开始到文件尾总字节数,即文件大小-8\r\n        data.setUint32(offset, 36 + bytes.byteLength, true); offset += 4;\r\n        // WAV文件标志\r\n        writeString(data, offset, 'WAVE'); offset += 4;\r\n        // 波形格式标志\r\n        writeString(data, offset, 'fmt '); offset += 4;\r\n        // 过滤字节,一般为 0x10 = 16\r\n        data.setUint32(offset, 16, true); offset += 4;\r\n        // 格式类别 (PCM形式采样数据)\r\n        data.setUint16(offset, 1, true); offset += 2;\r\n        // 声道数\r\n        data.setUint16(offset, channelCount, true); offset += 2;\r\n        // 采样率,每秒样本数,表示每个通道的播放速度\r\n        data.setUint32(offset, sampleRate, true); offset += 4;\r\n        // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\r\n        data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), true); offset += 4;\r\n        // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\r\n        data.setUint16(offset, channelCount * (sampleBits / 8), true); offset += 2;\r\n        // 采样位数\r\n        data.setUint16(offset, sampleBits, true); offset += 2;\r\n        // 数据标识符\r\n        writeString(data, offset, 'data'); offset += 4;\r\n        // 采样数据总数,即数据总大小-44\r\n        data.setUint32(offset, bytes.byteLength, true); offset += 4;\r\n        \r\n        // 给wav头增加pcm体\r\n        for (let i = 0; i < bytes.byteLength;) {\r\n            data.setUint8(offset, bytes.getUint8(i, true), true);\r\n            offset++;\r\n            i++;\r\n        }\r\n    \r\n        return data;\r\n    }\r\n}\r\n\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data 二进制数据\r\n * @param {String}      str  字符串\r\n */\r\nfunction writeString(data, offset, str) {\r\n    for (var i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\n/** \r\n * 通用方法\r\n */\r\n// 异常处理\r\nRecorder.throwError = function(message) {\r\n    throw new Error (message);\r\n}\r\n\r\nexport default Recorder;\r\n"],"sourceRoot":""}